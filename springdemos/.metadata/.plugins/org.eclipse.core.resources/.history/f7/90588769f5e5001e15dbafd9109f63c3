package com.doctor.service;

import java.util.List;

import com.doctor.exception.DoctorNotFoundException;
import com.doctor.exception.IdNotFoundException;
import com.doctor.model.Doctor;
import com.doctor.repository.DoctorRepositoryImpl;
import com.doctor.repository.IDoctorRepository;

public class DoctorServiceImpl implements IDoctorService {
	private final IDoctorRepository doctorRepository = new DoctorRepositoryImpl();

	@Override
	public void addDoctor(Doctor doctor) {

		doctorRepository.addDoctor(doctor);
	}

	@Override
	public void updateDoctor(int doctorId, double consulationFee) {
		doctorRepository.updateDoctor(doctorId, consultationFee);

	}

	@Override
	public void deleteDoctor(int doctorId) {
		doctorRepository.deleteDoctor(doctorId);

	}

	@Override
	public List<Doctor> getAll() {
		return doctorRepository.findAll();

	}

	@Override
	public List<Doctor> getBySpeciality(String speciality) throws DoctorNotFoundException {
		if (doctorRepository.findBySpeciality(speciality).isEmpty())
			throw new DoctorNotFoundException("doctor not found");
		return doctorRepository.findBySpeciality(speciality);
	}

	@Override
	public List<Doctor> getBySpecialityAndExperience(String speciality, int experience) throws DoctorNotFoundException {
		if (doctorRepository.findBySpecialityAndExperience(speciality, experience).isEmpty())
			throw new DoctorNotFoundException();
		return doctorRepository.findBySpecialityAndExperience(speciality, experience);
	}

	@Override
	public List<Doctor> getBySpecialityAndFeesLessThan(String speciality, int consultationFees)
			throws DoctorNotFoundException {
		if (doctorRepository.findBySpecialityAndFeesLessThan(speciality, consultationFees).isEmpty())
			throw new DoctorNotFoundException("Doctor with speciality and fee less than " + consultationFees + " is not found.");
		return doctorRepository.findBySpecialityAndFeesLessThan(speciality, consultationFees);
	}

	@Override
	public List<Doctor> getBySpecialityAndRating(String speciality, int ratings) throws DoctorNotFoundException {
		if (doctorRepository.findBySpecialityAndRating(speciality, ratings).isEmpty())
			throw new DoctorNotFoundException("Doctor not found with speciality and ratings.");
		return doctorRepository.findBySpecialityAndRating(speciality, ratings);
	}

	@Override
	public List<Doctor> getBySpecialityAndNameContains(String speciality, String doctorName)
			throws DoctorNotFoundException {
		if (doctorRepository.findBySpecialityAndNameContains(speciality, doctorName).isEmpty())
			throw new DoctorNotFoundException(
					"Doctor with speciality and name containing " + doctorName + " not found.");
		return doctorRepository.findBySpecialityAndNameContains(speciality, doctorName);
	}

	@Override
	public Doctor getById(int doctorId) throws IdNotFoundException {
		// TODO Auto-generated method stub
		return null;
	}
}
